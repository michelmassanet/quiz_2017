var models = require("../models");
var Sequelize = require('sequelize');
<<<<<<< HEAD

=======
var n=0;
>>>>>>> practica52
var paginate = require('../helpers/paginate').paginate;

// Autoload el quiz asociado a :quizId
exports.load = function (req, res, next, quizId) {

<<<<<<< HEAD
    models.Quiz.findById(quizId, {
        include: [
            {model:models.Tip,include: [{model:models.User,as:'Author'}]},
            {model: models.User, as: 'Author'}
        ]
    })
=======
    models.Quiz.findById(quizId)
>>>>>>> practica52
    .then(function (quiz) {
        if (quiz) {
            req.quiz = quiz;
            next();
        } else {
            throw new Error('No existe ningún quiz con id=' + quizId);
        }
    })
    .catch(function (error) {
        next(error);
    });
};

<<<<<<< HEAD
// MW que permite acciones solamente si al usuario logeado es admin o es el autor del quiz.
exports.adminOrAuthorTipRequired = function(req, res, next){

    var isAdmin  = req.session.user.isAdmin;
    var isAuthor = req.tip.AuthorId === req.session.user.id;

    if (isAdmin || isAuthor) {
        next();
    } else {
        console.log('Operación prohibida: El usuario logeado no es el autor del quiz, ni un administrador.');
        res.send(403);
    }
};


// MW que permite acciones solamente si al usuario logeado es admin o es el autor del quiz.
exports.adminOrAuthorRequired = function(req, res, next){

    var isAdmin  = req.session.user.isAdmin;
    var isAuthor = req.quiz.AuthorId === req.session.user.id;

    if (isAdmin || isAuthor) {
        next();
    } else {
        console.log('Operación prohibida: El usuario logeado no es el autor del quiz, ni un administrador.');
        res.send(403);
    }
};

=======
>>>>>>> practica52

// GET /quizzes
exports.index = function (req, res, next) {

<<<<<<< HEAD
    var countOptions = {
        where: {}
    };

    var title = "Preguntas";
=======
    var countOptions = {};
>>>>>>> practica52

    // Busquedas:
    var search = req.query.search || '';
    if (search) {
        var search_like = "%" + search.replace(/ +/g,"%") + "%";

<<<<<<< HEAD
        countOptions.where.question = { $like: search_like };
    }

    // Si existe req.user, mostrar solo sus preguntas.
    if (req.user) {
        countOptions.where.AuthorId = req.user.id;
        title = "Preguntas de " + req.user.username;
=======
        countOptions.where = {question: { $like: search_like }};
>>>>>>> practica52
    }

    models.Quiz.count(countOptions)
    .then(function (count) {

        // Paginacion:

        var items_per_page = 10;

        // La pagina a mostrar viene en la query
        var pageno = parseInt(req.query.pageno) || 1;

        // Crear un string con el HTML que pinta la botonera de paginacion.
        // Lo añado como una variable local de res para que lo pinte el layout de la aplicacion.
        res.locals.paginate_control = paginate(count, items_per_page, pageno, req.url);

        var findOptions = countOptions;

        findOptions.offset = items_per_page * (pageno - 1);
        findOptions.limit = items_per_page;
<<<<<<< HEAD
        findOptions.include = [{model: models.User, as: 'Author'}];
=======
>>>>>>> practica52

        return models.Quiz.findAll(findOptions);
    })
    .then(function (quizzes) {
        res.render('quizzes/index.ejs', {
            quizzes: quizzes,
<<<<<<< HEAD
            search: search,
            title: title
=======
            search: search
>>>>>>> practica52
        });
    })
    .catch(function (error) {
        next(error);
    });
};


// GET /quizzes/:quizId
exports.show = function (req, res, next) {
<<<<<<< HEAD

    res.render('quizzes/show', {quiz: req.quiz});
};


=======
	//var quizId = Number(req.params.quizId);
	//var quiz = models.Quiz.findById(quizId);

	
    		res.render('quizzes/show', {quiz: req.quiz});

};




>>>>>>> practica52
// GET /quizzes/new
exports.new = function (req, res, next) {

    var quiz = {question: "", answer: ""};

    res.render('quizzes/new', {quiz: quiz});
};


<<<<<<< HEAD
// POST /quizzes/create
exports.create = function (req, res, next) {

    var authorId = req.session.user && req.session.user.id || 0;

    var quiz = models.Quiz.build({
        question: req.body.question,
        answer: req.body.answer,
        AuthorId: authorId
    });

    // guarda en DB los campos pregunta y respuesta de quiz
    quiz.save({fields: ["question", "answer", "AuthorId"]})
=======

// POST /quizzes/create
exports.create = function (req, res, next) {

    var quiz = models.Quiz.build({
        question: req.body.question,
        answer: req.body.answer
    });


//validar que no estan vacios

if(!quiz.question || !quiz.answer){
	res.render('quizzes/new', {quiz:quiz});
	return;
}

    //guarda en DB los campos pregunta y respuesta de quiz
  quiz.save({fields: ["question", "answer"]})
>>>>>>> practica52
    .then(function (quiz) {
        req.flash('success', 'Quiz creado con éxito.');
        res.redirect('/quizzes/' + quiz.id);
    })
    .catch(Sequelize.ValidationError, function (error) {

        req.flash('error', 'Errores en el formulario:');
        for (var i in error.errors) {
            req.flash('error', error.errors[i].value);
        }

        res.render('quizzes/new', {quiz: quiz});
    })
    .catch(function (error) {
        req.flash('error', 'Error al crear un Quiz: ' + error.message);
        next(error);
    });
<<<<<<< HEAD
=======

//guarda el nuevo quiz
//quiz =models.Quiz.create(quiz);
//res.redirect('/quizzes/' + quiz.id);

>>>>>>> practica52
};


// GET /quizzes/:quizId/edit
exports.edit = function (req, res, next) {

    res.render('quizzes/edit', {quiz: req.quiz});
};


// PUT /quizzes/:quizId
exports.update = function (req, res, next) {

    req.quiz.question = req.body.question;
    req.quiz.answer = req.body.answer;

    req.quiz.save({fields: ["question", "answer"]})
    .then(function (quiz) {
        req.flash('success', 'Quiz editado con éxito.');
        res.redirect('/quizzes/' + req.quiz.id);
    })
    .catch(Sequelize.ValidationError, function (error) {

        req.flash('error', 'Errores en el formulario:');
        for (var i in error.errors) {
            req.flash('error', error.errors[i].value);
        }

        res.render('quizzes/edit', {quiz: req.quiz});
    })
    .catch(function (error) {
        req.flash('error', 'Error al editar el Quiz: ' + error.message);
        next(error);
    });
};


// DELETE /quizzes/:quizId
exports.destroy = function (req, res, next) {

<<<<<<< HEAD
    req.quiz.destroy()
    .then(function () {
        req.flash('success', 'Quiz borrado con éxito.');
        res.redirect('/goback');
=======

	//var quizId=Numer(req.params.quizId);
	//var quiz= models.Quiz.findById(quizId);

	

//esto pa bajo (tema 8) no está

    req.quiz.destroy()
    .then(function () {
        req.flash('success', 'Quiz borrado con éxito.');
        res.redirect('/quizzes');
>>>>>>> practica52
    })
    .catch(function (error) {
        req.flash('error', 'Error al editar el Quiz: ' + error.message);
        next(error);
    });
<<<<<<< HEAD
=======

>>>>>>> practica52
};


// GET /quizzes/:quizId/play
exports.play = function (req, res, next) {
<<<<<<< HEAD

=======
//var quizId = Number(req.params.quizId);
	//var quiz = models.Quiz.findById(quizId);
>>>>>>> practica52
    var answer = req.query.answer || '';

    res.render('quizzes/play', {
        quiz: req.quiz,
        answer: answer
    });
};


// GET /quizzes/:quizId/check
exports.check = function (req, res, next) {

    var answer = req.query.answer || "";

    var result = answer.toLowerCase().trim() === req.quiz.answer.toLowerCase().trim();

<<<<<<< HEAD
=======
	//if(result) score++;

>>>>>>> practica52
    res.render('quizzes/result', {
        quiz: req.quiz,
        result: result,
        answer: answer
    });
};
<<<<<<< HEAD
=======




var nojugados;
//GET /quizzes/randomplay

exports.random = function (req, res, next) {

models.Quiz.findAll().then(function(quizzes){

req.session.score=req.session.score ||0;

if(n==0){
req.session.score=0;
}

req.session.nojugados=req.session.nojugados || quizzes;
if(req.session.nojugados.length>n){

res.render('quizzes/random_play.ejs',{quiz:req.session.nojugados[n],
					score:req.session.score});
}else{

	res.render('quizzes/random_none.ejs', {score: req.session.score});
	n=0;
	req.session.score=0;
}





}).catch(function(error){
	next(error);
});


//var rnd = Math.floor((Math.random()* array.length)+1);
//var newId = models.Quiz.findById(rnd);
};



// GET /quizzes/randomcheck/:quizId?answer=respuesta

exports.randomcheck = function (req, res, next) {

    var answer = req.query.answer || "";

    var result = answer.toLowerCase().trim() === req.quiz.answer.toLowerCase().trim();

	
if(result){ req.session.score++;
		n++;}else{req.session.score=0;
		n=0}
    res.render('quizzes/random_result.ejs', {
        score: req.session.score,
	result: result,
        answer: answer
    });
if(!result){ req.session.score=0;
		n=0;}
};
>>>>>>> practica52
